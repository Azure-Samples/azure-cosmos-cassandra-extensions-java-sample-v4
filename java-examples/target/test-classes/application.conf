# Azure Cosmos Extensions for DataStax Java Driver 4 for Apache Cassandra reference configuration
#
# Override the values provided here to match your environment and preferences. The default values set here are known to
# work well with the Cosmos Cassandra API. See https://docs.datastax.com/en/developer/java-driver/4.9/manual/core/configuration/
# for a general discussion of DataStax Java Driver 4.X configuration.

datastax-java-driver {
  advanced {
    auth-provider {
      # When you take a dependency on azure-cosmos-cassandra-driver-4-extensions the PlainTextAuthProvider is used by
      # default. The Cosmos Cassandra API requires authentication and uses plain text authentication by default.
      class = PlainTextAuthProvider
    }
    retry-policy {
      # When you take a dependency on azure-cosmos-cassandra-driver-4-extensions CosmosRetryPolicy is used by default.
      # This provides a good out-of-box experience for communicating with Cosmos Cassandra instances.
      class = com.azure.cosmos.cassandra.CosmosRetryPolicy
      #class = DefaultRetryPolicy
      max-retries = 5              # Maximum number of retries
      fixed-backoff-time = 5000    # Fixed backoff time in milliseconds
      growing-backoff-time = 1000  # Growing backoff time in milliseconds
    }
    ssl-engine-factory {
      # When you take a dependency on azure-cosmos-cassandra-driver-4-extensions the DefaultSslEngineFactory is used by
      # default. The Cosmos Cassandra API requires SSL.
      class = DefaultSslEngineFactory
    }
    reconnection-policy{
      # The driver provides two implementations out of the box: ExponentialReconnectionPolicy and
      # ConstantReconnectionPolicy. We recommend ConstantReconnectionPolicy for Cassandra API, with 
      # base-delay of 2 seconds.
      class = ConstantReconnectionPolicy
      base-delay = 2 second
    }

    heartbeat {
    # The heartbeat interval. If a connection stays idle for that duration (no reads), the driver
    # sends a dummy message on it to make sure it's still alive. If not, the connection is trashed
    # and replaced.
    #
    # Required: yes
    # Modifiable at runtime: yes, the new value will be used for connections created after the
    #   change.
    # Overridable in a profile: no
    interval = 30 seconds

    # How long the driver waits for the response to a heartbeat. If this timeout fires, the
    # heartbeat is considered failed.
    # default is 500 milliseconds. We recommend 120 miliseconds for Cassandra API. 
    timeout = 120 milliseconds
    }

    # Whether or not to enable TCP keep-alive probes.
    #
    # See java.net.StandardSocketOptions.SO_KEEPALIVE.
    #
    # Required: no
    # Modifiable at runtime: yes, the new value will be used for connections created after the
    #   change.
    # Overridable in a profile: no
    socket{
      keep-alive = true
    }

  }
  basic {
    load-balancing-policy {

      # When you take a dependency on azure-cosmos-cassandra-driver-4-extensions the CosmosLoadBalancingPolicy is used
      # by default. This provides a good out-of-box experience for communicating with Cosmos Cassandra instances.
      class = com.azure.cosmos.cassandra.CosmosLoadBalancingPolicy
      # class = DefaultLoadBalancingPolicy
      # DNS expiry time in seconds
      dns-expiry-time = 60

      # Global endpoint for connecting to Cosmos
      #
      #   When basic.load-balancing-policy.global-endpoint is specified, you may specify a read-datacenter, but must not
      #   specify a write-datacenter. Writes will go to the default write region when global-endpoint is specified.
      #
      #   When basic.load-balancing-policy.global-endpoint is not specified, you must specify both a read-datacenter and
      #   a write-datacenter.

      global-endpoint = ""

      # Datacenter for read operations

      read-datacenter = "Australia East"

      # Datacenter for write operations

      write-datacenter = "Australia East"
    }
  }
}